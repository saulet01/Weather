{"version":3,"sources":["umbrella.svg","Components/Weather.js","Components/City.js","Components/Title.js","App.js","serviceWorker.js","WeatherStore.js","index.js"],"names":["module","exports","__webpack_require__","p","Weather","props","city_info","weatherData","react_default","a","createElement","Card","border","style","width","Body","name","sys","country","main","temp","coord","lat","lon","City","type","placeholder","onChange","changed","onKeyUp","event","keyCode","cityInfo","target","value","className","Title","Jumbotron","fluid","backgroundColor","backgroundImage","src","weatherLogo","alt","inject","observer","parse_Data","toJS","WeatherStore","Components_Title","Container","Row","Col","xs","md","Components_City","city","loadWeather","inputValue","inputHandler","Components_Weather","Boolean","window","location","hostname","match","configure","enforceActions","fetch","concat","then","response","json","data","_this","setWeather","decorate","observable","action","weatherStore","Root","index_module","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7ba019c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/umbrella.58600a30.svg\";","import React from 'react';\nimport {Card} from 'react-bootstrap';\n\nconst Weather = (props) => {\n  let city_info = null;\n  if(props.weatherData != null){\n    city_info = (\n      <Card border=\"danger\" style={{ width: '30rem' }}>\n        <Card.Body>\n          <p>Город: {props.weatherData.name} ({props.weatherData.sys.country})</p>\n          <p>Температура: {props.weatherData.main.temp} градусов</p>\n          <p>Местоположение: {props.weatherData.coord.lat}, {props.weatherData.coord.lon}</p>\n        </Card.Body>\n      </Card>\n    );\n  }\n  return(\n    <div>\n      { city_info }\n    </div>\n\n  )\n}\n\nexport default Weather;\n","import React from 'react';\nimport {Card} from 'react-bootstrap';\n\nconst City = (props) => {\n\n  const handleKey = (event) => {\n    if(event.keyCode === 13){\n      props.cityInfo(event.target.value)\n    }\n  }\n\n  return(\n      <Card border=\"danger\" style={{ width: '23rem' }}>\n        <Card.Body>\n            <input style={{width: '20rem'}} type=\"text\" name=\"city\" placeholder=\"Введите город. Например 'Алматы'\" onChange = {props.changed} onKeyUp = { handleKey } />\n            <p className=\"mt-2\">Город: {props.value}</p>\n        </Card.Body>\n      </Card>\n  )\n}\n\nexport default City;\n","import React from 'react';\nimport weatherLogo from '../umbrella.svg';\nimport {Jumbotron} from 'react-bootstrap';\n\nconst Title = () => {\n  return(\n    <Jumbotron fluid className=\"text-center\" style={{ backgroundColor: '#fc5296', backgroundImage: 'linear-gradient(315deg, #fc5296 0%, #f67062 74%)' }}>\n      <h1 className=\"display-3 text-white d-inline\">Simple Weather App <img src={weatherLogo} alt=\"logo\" width=\"70\"/></h1>\n      <p className=\"lead\">\n        Инструкция: Введите город и нажмите \"Enter\"\n      </p>\n\n    </Jumbotron>\n  );\n}\n\nexport default Title;\n","import React from 'react';\nimport './App.css';\nimport Weather from './Components/Weather';\nimport City from './Components/City';\nimport Title from './Components/Title';\nimport { Container, Row, Col} from 'react-bootstrap';\nimport { observer, inject } from 'mobx-react';\nimport { toJS } from 'mobx';\n\nconst App = (props) => {\n\n  const getCityInfo = (city) => {\n    props.WeatherStore.loadWeather(city);\n  }\n\n  let parse_Data = null;\n  if(toJS(props.WeatherStore.weatherData.name)){\n    parse_Data = (toJS(props.WeatherStore.weatherData));\n  }\n  return (\n    <div>\n      <Title />\n      <Container>\n        <Row>\n          <Col xs={12} md={6}>\n            <City\n              cityInfo = {getCityInfo}\n              value = {props.WeatherStore.inputValue}\n              changed = {props.WeatherStore.inputHandler}\n            />\n          </Col>\n          <Col xs={12} md={6}>\n            <Weather\n              weatherData = { parse_Data }\n            />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default inject(\"WeatherStore\")(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  configure,\n  observable,\n  action,\n  decorate\n} from 'mobx';\n\nconst api_unique = '686aeb1eff8cb88780f2fbb1b51b06f8';\n\nconfigure({ enforceActions: 'observed' });\n\nclass WeatherStore{\n  weatherData = {};\n  inputValue = '';\n  loadWeather = (city) => {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api_unique}&units=metric`)\n    .then(response => response.json())\n    .then(data => {\n      this.setWeather(data);\n    });\n  };\n\n  inputHandler = (event) => {\n    this.inputValue = event.target.value;\n  }\n\n  setWeather = data => {\n    this.weatherData = data;\n  }\n}\n\ndecorate(WeatherStore, {\n  weatherData: observable,\n  inputValue: observable,\n  setWeather: action,\n  inputHandler: action\n});\n\nconst weatherStore = new WeatherStore();\n\nexport default weatherStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"mobx-react\";\nimport WeatherStore from './WeatherStore';\n\nconst Root = (\n  <Provider WeatherStore = { WeatherStore }>\n    <App />\n  </Provider>\n);\nReactDOM.render(Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}